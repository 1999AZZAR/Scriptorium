#!/usr/bin/env python3
"""
A script to randomly change the wallpaper and update system colors.

This script performs the following actions:
1.  Picks a random wallpaper from a specified directory.
2.  Sets the new wallpaper using swaybg.
3.  Runs pywal to generate a new color scheme from the wallpaper.
4.  Updates Hyprland colors by calling an external script.
5.  Updates the hyprlock background configuration.
6.  Generates a new Wofi stylesheet based on the pywal colors.
7.  Generates a new wlogout stylesheet.
8.  Generates a new konsole theme.
9.  Restarts Waybar to apply the new theme.
"""

import os
import random
import subprocess
import sys
import json

# --- Configuration ---
WALLPAPER_DIR = os.path.expanduser("~/dotfiles/wallpapers/")
HYPR_COLORS_SCRIPT = os.path.expanduser("~/bin/update_hypr_colors.py")
WOFI_STYLE_PATH = os.path.expanduser("~/.config/wofi/style.css")
WLOGOUT_TEMPLATE_PATH = os.path.expanduser(
    "~/.config/wlogout/style.css.template")
WLOGOUT_STYLE_PATH = os.path.expanduser("~/.config/wlogout/style.css")
WAL_CACHE_DIR = os.path.expanduser("~/.cache/wal/")
KONSOLE_SCHEME_PATH = os.path.expanduser(
    "~/.local/share/konsole/pywal.colorscheme")
HYPRLOCK_CONF = os.path.expanduser("~/.config/hypr/hyprlock.conf")

# --- Helper Functions ---


def hex_to_rgb_string(hex_color):
    """Converts a hex color string (e.g., '#ffffff') to an RGB string (e.g., '255, 255, 255')."""
    hex_color = hex_color.lstrip("#")
    return ", ".join(str(int(hex_color[i: i + 2], 16)) for i in (0, 2, 4))


# --- Main Functions ---


def find_wallpapers(directory):
    """Finds all image files in a given directory."""
    supported_extensions = {".jpg", ".jpeg", ".png", ".gif"}
    try:
        return [
            f
            for f in os.listdir(directory)
            if os.path.splitext(f)[1].lower() in supported_extensions
        ]
    except FileNotFoundError:
        print(f"❌ Error: Wallpaper directory not found at {directory}")
        return []


def choose_random_wallpaper(wallpapers):
    """Selects a random wallpaper from the list."""
    if not wallpapers:
        return None
    return random.choice(wallpapers)


def set_wallpaper(wallpaper_path):
    """Sets the desktop wallpaper using swaybg."""
    print("1️⃣ Setting new wallpaper...")
    try:
        # Kill any existing swaybg instance to prevent multiple layers
        subprocess.run(["pkill", "swaybg"], check=False)
        # Start a new swaybg process in the background
        subprocess.Popen(["swaybg", "-i", wallpaper_path, "-m", "fill"])
        print(f"✅ Wallpaper set to: {os.path.basename(wallpaper_path)}")
        return True
    except (FileNotFoundError, subprocess.CalledProcessError) as e:
        print(f"❌ Error setting wallpaper: {e}")
        return False


def run_pywal(wallpaper_path):
    """Runs pywal to generate a color scheme."""
    print("2️⃣ Generating color scheme with pywal...")
    try:
        subprocess.run(
            [
                "wal",
                "-i",
                wallpaper_path,
                "-n",
                "-q",
            ],  # -n skips setting wallpaper, -q is quiet
            check=True,
            timeout=20,
        )
        print("✅ pywal finished successfully.")
        return True
    except (
        FileNotFoundError,
        subprocess.CalledProcessError,
        subprocess.TimeoutExpired,
    ) as e:
        print(f"❌ Error running pywal: {e}")
        return False


def update_wofi_stylesheet():
    """Generates a new Wofi CSS file from pywal colors."""
    print("3️⃣ Updating Wofi stylesheet...")
    wal_colors_file = os.path.join(WAL_CACHE_DIR, "colors.json")
    try:
        with open(wal_colors_file, "r") as f:
            colors = json.load(f)["colors"]

        # Define the CSS template using an f-string for clarity
        css_template = f"""
/* Auto-generated by wallpaper script */

window {{
    background-color: {colors['color0']};
    border: 2px solid {colors['color4']};
    border-radius: 15px;
}}

#input {{
    background-color: {colors['color9']};
    color: {colors['color7']};
    border: none;
    border-radius: 10px;
    margin: 10px;
    padding: 8px;
}}

#inner-box {{
    margin: 5px;
}}

#outer-box {{
    margin: 5px;
}}

#scroll {{
    margin: 5px;
}}

#entry:selected {{
    background-color: {colors['color4']};
    color: {colors['color0']};
    border-radius: 10px;
}}

#text:selected {{
    color: {colors['color0']};
}}

#text {{
    color: {colors['color7']};
    padding: 5px;
}}
"""
        with open(WOFI_STYLE_PATH, "w") as f:
            f.write(css_template)
        print("✅ Wofi stylesheet updated.")

    except (FileNotFoundError, KeyError) as e:
        print(
            f"❌ Error updating Wofi stylesheet: Could not read wal colors. {e}")


def update_hyprland_colors():
    """Runs the external script to update Hyprland colors."""
    print("4️⃣ Updating Hyprland colors...")
    try:
        subprocess.run(["python3", HYPR_COLORS_SCRIPT], check=True)
    except (FileNotFoundError, subprocess.CalledProcessError) as e:
        print(f"❌ Error running Hyprland update script: {e}")


def update_hyprlock_config(wallpaper_path):
    """Directly edits the hyprlock.conf file to set the new wallpaper path."""
    print("2️⃣  Updating hyprlock.conf directly...")
    if not os.path.exists(HYPRLOCK_CONF):
        print(f"❌ Error: hyprlock config not found at {HYPRLOCK_CONF}")
        return

    try:
        # Use sed to find the line starting with "path =" and replace it.
        # Using '#' as a delimiter avoids issues with '/' in file paths.
        subprocess.run([
            "sed",
            "-i",
            f"s#^\\s*path = .*#    path = {wallpaper_path}#",
            HYPRLOCK_CONF
        ], check=True)
        print("✅ hyprlock.conf updated successfully.")
    except (FileNotFoundError, subprocess.CalledProcessError) as e:
        print(f"❌ Error updating hyprlock.conf: {e}")
        print("    Please ensure 'sed' is installed and the script has permissions.")


def update_wlogout_style():
    """Generates a new wlogout CSS file from pywal colors."""
    print("5️⃣ Updating wlogout stylesheet...")
    wal_colors_file = os.path.join(WAL_CACHE_DIR, "colors.json")
    try:
        with open(wal_colors_file, "r") as f:
            colors = json.load(f)

        # Read the template file
        with open(WLOGOUT_TEMPLATE_PATH, "r") as f:
            template = f.read()

        # Get colors and convert them for RGBA
        foreground = colors["special"]["foreground"]
        background_rgb = hex_to_rgb_string(colors["special"]["background"])
        accent_rgb = hex_to_rgb_string(colors["colors"]["color4"])

        # Replace placeholders
        themed_css = template.replace("{{foreground}}", foreground)
        themed_css = themed_css.replace("{{background_rgb}}", background_rgb)
        themed_css = themed_css.replace("{{accent_rgb}}", accent_rgb)

        # Write the new stylesheet
        with open(WLOGOUT_STYLE_PATH, "w") as f:
            f.write(themed_css)
        print("✅ wlogout stylesheet updated.")

    except (FileNotFoundError, KeyError) as e:
        print(f"❌ Error updating wlogout stylesheet: {e}")


def update_konsole_theme():
    """Generates a Konsole color scheme from the pywal cache."""
    print("7️⃣ Updating Konsole color scheme...")
    wal_colors_file = os.path.join(WAL_CACHE_DIR, "colors.json")
    try:
        with open(wal_colors_file, "r", encoding="utf-8") as f:
            wal_data = json.load(f)

        colors = wal_data["colors"]
        special = wal_data["special"]

        scheme_content = f"""
[ColorTable]
Color0={colors['color0']}
Color1={colors['color1']}
Color2={colors['color2']}
Color3={colors['color3']}
Color4={colors['color4']}
Color5={colors['color5']}
Color6={colors['color6']}
Color7={colors['color7']}
Color8={colors['color8']}
Color9={colors['color9']}
Color10={colors['color10']}
Color11={colors['color11']}
Color12={colors['color12']}
Color13={colors['color13']}
Color14={colors['color14']}
Color15={colors['color15']}

[General]
BackgroundDefault=true
BackgroundNormal={special['background']}
ForegroundNormal={special['foreground']}
BackgroundIntense={special['background']}
ForegroundIntense={special['foreground']}

[View]
Name=pywal
"""
        with open(KONSOLE_SCHEME_PATH, "w", encoding="utf-8") as f:
            f.write(scheme_content.strip())
        print(f"✅ Konsole theme 'pywal.colorscheme' updated.")

    except (FileNotFoundError, KeyError) as e:
        print(f"❌ Error updating Konsole theme: {e}")


def restart_waybar():
    """Restarts Waybar to apply the new theme."""
    print("5️⃣ Restarting Waybar...")
    try:
        subprocess.run(["pkill", "waybar"], check=False)
        subprocess.Popen(["waybar"])
        print("✅ Waybar restarted.")
    except (FileNotFoundError, subprocess.CalledProcessError) as e:
        print(f"❌ Error restarting Waybar: {e}")


def main():
    """Main execution flow."""
    wallpapers = find_wallpapers(WALLPAPER_DIR)
    if not wallpapers:
        sys.exit(1)

    wallpaper_name = choose_random_wallpaper(wallpapers)
    if not wallpaper_name:
        print("❌ No wallpaper chosen.")
        sys.exit(1)

    wallpaper_path = os.path.join(WALLPAPER_DIR, wallpaper_name)

    if not set_wallpaper(wallpaper_path):
        sys.exit(1)

    if not run_pywal(wallpaper_path):
        print("⚠️ Proceeding without updated color scheme.")

    # These can run even if pywal fails, they just won't have new colors
    update_wofi_stylesheet()
    update_hyprland_colors()
    update_hyprlock_config(wallpaper_path)
    update_wlogout_style()
    update_konsole_theme()
    restart_waybar()

    print("\n✨ Theme update complete!")


if __name__ == "__main__":
    main()
