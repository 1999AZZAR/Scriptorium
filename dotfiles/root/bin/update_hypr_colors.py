#!/usr/bin/env python3
"""
Updates Hyprland colors based on the current pywal theme.

This script reads colors from ~/.cache/wal/colors.json and generates
a new ~/.config/hypr/colors.conf file, then reloads Hyprland.
"""

import json
import os
import subprocess
import sys

# --- Configuration ---
WAL_COLORS_FILE = os.path.expanduser("~/.cache/wal/colors.json")
HYPR_COLORS_CONF = os.path.expanduser("~/.config/hypr/colors.conf")


def main():
    """The main function of the script."""
    print("üé® Updating Hyprland colors...")

    # 1. Read colors from pywal cache
    try:
        with open(WAL_COLORS_FILE, "r", encoding="utf-8") as f:
            wal_colors = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError) as e:
        print(f"‚ùå Error: Cannot read wal colors from {WAL_COLORS_FILE}.")
        print(f"   Reason: {e}")
        sys.exit(1)

    # 2. Define your desired color mapping
    # Map semantic names to all available colors from the 'wal' output.
    color_map = {
        # Hyprland Variable  | Pywal Color Source
        # =======================================================
        # Special Colors
        "$background": wal_colors["special"]["background"],
        "$foreground": wal_colors["special"]["foreground"],
        "$cursor": wal_colors["special"]["cursor"],
        # Full 16-color palette
        "$color0": wal_colors["colors"]["color0"],
        "$color1": wal_colors["colors"]["color1"],
        "$color2": wal_colors["colors"]["color2"],
        "$color3": wal_colors["colors"]["color3"],
        "$color4": wal_colors["colors"]["color4"],
        "$color5": wal_colors["colors"]["color5"],
        "$color6": wal_colors["colors"]["color6"],
        "$color7": wal_colors["colors"]["color7"],
        "$color8": wal_colors["colors"]["color8"],
        "$color9": wal_colors["colors"]["color9"],
        "$color10": wal_colors["colors"]["color10"],
        "$color11": wal_colors["colors"]["color11"],
        "$color12": wal_colors["colors"]["color12"],
        "$color13": wal_colors["colors"]["color13"],
        "$color14": wal_colors["colors"]["color14"],
        "$color15": wal_colors["colors"]["color15"],
    }

    # 3. Generate the new colors.conf content
    header = (
        "# Auto-generated by update_hypr_colors.py\n# Do not edit this file manually.\n"
    )
    config_lines = [header]
    for var, hex_color in color_map.items():
        # Hyprland's rgba() format wants hex without the '#' and with opacity.
        rgba_value = f"{hex_color.lstrip('#')}ff"
        config_lines.append(f"{var} = rgba({rgba_value})")

    new_config_content = "\n".join(config_lines) + "\n"

    # 4. Write the new configuration file
    try:
        with open(HYPR_COLORS_CONF, "w", encoding="utf-8") as f:
            f.write(new_config_content)
        print(f"‚úÖ Successfully wrote new colors to {HYPR_COLORS_CONF}")
    except IOError as e:
        print(f"‚ùå Error: Could not write to {HYPR_COLORS_CONF}.")
        print(f"   Reason: {e}")
        sys.exit(1)

    # 5. Reload Hyprland to apply the new colors
    try:
        subprocess.run(["hyprctl", "reload"], check=True, capture_output=True)
        print("üöÄ Hyprland reloaded successfully.")
    except (FileNotFoundError, subprocess.CalledProcessError) as e:
        print("‚ö†Ô∏è Warning: Could not reload Hyprland.")
        print(f"   Reason: {e}")

    print("‚ú® Done.")


if __name__ == "__main__":
    main()
